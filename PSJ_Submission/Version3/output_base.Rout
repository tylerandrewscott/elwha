
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> 
> library(Rglpk)
Loading required package: slam
Using the GLPK callable library version 4.45
> require(statnet)
Loading required package: statnet
Loading required package: network
network: Classes for Relational Data
Version 1.12.0 created on 2015-03-04.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

Loading required package: ergm
Loading required package: statnet.common

ergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-2 created on 2014-01-13.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:network’:

    %c%

Loading required package: networkDynamic

networkDynamic: version 0.7.1, created on 2014-09-29
Copyright (c) 2014, Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll, University of Washington
                    with contributions from
                    Zack Almquist, University of California -- Irvine
                    David R. Hunter, Penn State University
                    Li Wang
                    Kirk Li, University of Washington
                    Steven M. Goodreau, University of Washington
                    Jeffrey Horner
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("networkDynamic").

Loading required package: tergm

tergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    David R. Hunter, Penn State University
                    Steven M. Goodreau, University of Washington
                    Martina Morris, University of Washington
                    Nicole Bohme Carnegie, New York University
                    Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Skye Bender-deMoll
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("tergm").

Loading required package: ergm.count

ergm.count: version 3.1.1, created on 2013-03-29
Copyright (c) 2013, Pavel N. Krivitsky, University of Wollongong
                    with contributions from
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.count").

Loading required package: latentnet

latentnet: version 2.7.0, created on 2015-03-21
Copyright (c) 2015, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    Susan M. Shortreed
                    Jeremy Tantrum
                    Peter D. Hoff
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("latentnet").
NOTE: BIC calculation prior latentnet 2.7.0 had a bug in the calculation of the effective number of parameters. See help(summary.ergmm) for details.

statnet: version 2014.2.0, created on 2014-02-05
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("statnet").

> library(ergm)
> library(RCurl)
Loading required package: bitops
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:network’:

    is.discrete

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following object is masked from ‘package:stats’:

    filter

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(snow)
> library(rlecuyer)
> library(reshape2)
> library(ggplot2)
> 
> 
> ####PREPARE DATA#############
> dat_all <- read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/edgelist_all.csv"),row.names=1)
> 
> # Read a csv file into a data frame
> 
> #dat_all=read.csv(file="edgelist_all.csv",row.names=1)
> temp<-dat_all[as.character(dat_all$ORG)!=as.character(dat_all$Contact),]
> 
> temp$paste<-paste(temp$ORG,temp$Contact)
> 
> temptab<-data.frame(table(temp$paste))
> colnames(temptab) = c('paste','Freq')
> 
> temp$count = temptab$Freq[match(temp$paste,temptab$paste)]
> 
> t<-temp[order(temp$TType,decreasing=T),]
> 
> tt<-t[!duplicated(t$paste),]
> 
> resp.dat=read.csv(text = getURL('https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Response.Used.csv')
+    ,row.names=1)
>                            
> 
> allorgs<-sort(unique(c(as.character(resp.dat$ORG),as.character(tt$ORG),as.character(tt$Contact))))
> 
> tt$INSURV<-tt$Contact %in% resp.dat$ORG
> 
> t1<-tt[tt$INSURV==TRUE,]
> 
> net_temp = network.initialize(length(unique(resp.dat$ORG)),directed=TRUE,loops=FALSE)
> vertex_attributes  = data.frame(sort(unique(resp.dat$ORG)))
> colnames(vertex_attributes) = "NAME"
> network.vertex.names(net_temp)<-as.character(vertex_attributes$NAME)
> 
> TAIL_ID = match(t1$ORG,network.vertex.names(net_temp))
> HEAD_ID = match(t1$Contact,network.vertex.names(net_temp))
> 
> for (i in 1:length(TAIL_ID))
+ {
+   net_temp[TAIL_ID[i],HEAD_ID[i]]<-1
+   net_temp[TAIL_ID[i],HEAD_ID[i],"TCO"]<-t1$count[i]
+   net_temp[TAIL_ID[i],HEAD_ID[i],"TVAL"]<-ifelse(t1$TType[i]=="WT",
+                                                  3,ifelse(t1$TType[i]=="PT",2,1))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"WIN5_dk1"]<-ifelse(is.na(t1$WIN5[i]),1,(ifelse(t1$WIN5[i]>0,1,t1$WIN5)))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"WIN5_dk0"]<-ifelse(is.na(t1$WIN5[i]),0,(ifelse(t1$WIN5[i]==1,1,0)))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"PRIOR_TIE"]<-ifelse(is.na(t1$WIN5[i]),0,(ifelse(t1$WIN5[i]>0,0,1)))
+ }
> 
> 
> vertex_attributes$TOTALYEARS = resp.dat$total.years[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> vertex_attributes$NUMGROUPS = data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(NumGroups)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(NumGroups)))[,1])]
> 
> vertex_attributes$NUMRESP = data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Numres)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Numres)))[,1])]
> 
> vertex_attributes$MEANYEARS= data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Years)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Years)))[,1])]
> 
> vertex_attributes$ORGTYPE = resp.dat$ORGType[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> vertex_attributes$USEPLAN = resp.dat$useful_plan[match(vertex_attributes$NAME,resp.dat$ORG)]
> vertex_attributes$USEWORK = resp.dat$useful_work[match(vertex_attributes$NAME,resp.dat$ORG)]
> vertex_attributes$USECONS = resp.dat$useful_cons[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> 
> temp = as.data.frame(tapply(resp.dat$npsp,resp.dat$ORG,mean))
> temp$ORG = rownames(temp)
> colnames(temp)[1] = 'npsp.mean'
> resp.dat$npsp = as.vector(temp$npsp.mean[match(resp.dat$ORG,temp$ORG)])
> 
> temp = as.data.frame(tapply(resp.dat$psp,resp.dat$ORG,mean))
> temp$ORG = rownames(temp)
> colnames(temp)[1] = 'psp.mean'
> resp.dat$psp = as.vector(temp$psp.mean[match(resp.dat$ORG,temp$ORG)])
> 
> vertex_attributes$PSP_N = as.vector(
+   tapply(resp.dat$psp,resp.dat$ORG,mean)[match(vertex_attributes$NAME, rownames(tapply(resp.dat$psp,resp.dat$ORG,mean)))])
> 
> vertex_attributes$NPSP_N = as.vector(
+   tapply(resp.dat$psp,resp.dat$ORG,mean)[match(vertex_attributes$NAME, rownames(tapply(resp.dat$npsp,resp.dat$ORG,mean)))])
> 
> 
> network.vertex.names(net_temp) = as.character(vertex_attributes$NAME)
> 
> set.vertex.attribute(net_temp,"ORGTYPE",value=as.character(vertex_attributes$ORGTYPE))
> set.vertex.attribute(net_temp,"TOTALYEARS",value=vertex_attributes$TOTALYEARS)
> set.vertex.attribute(net_temp,"NUMGROUPS",value=vertex_attributes$NUMGROUPS)
> set.vertex.attribute(net_temp,"NUMRESP",value=vertex_attributes$NUMRESP)
> set.vertex.attribute(net_temp,"MEANYEARS",value=vertex_attributes$MEANYEARS)
> set.vertex.attribute(net_temp,"PSP_N",    value=vertex_attributes$PSP_N)
> set.vertex.attribute(net_temp,"NPSP_N",value=vertex_attributes$NPSP_N)
> set.vertex.attribute(net_temp,"USEWORK",value=ifelse(is.na(as.numeric(vertex_attributes$USEWORK)),0,as.numeric(vertex_attributes$USEWORK)))
> set.vertex.attribute(net_temp,"USEPLAN",value=ifelse(is.na(as.numeric(vertex_attributes$USEPLAN)),0,as.numeric(vertex_attributes$USEPLAN)))
> set.vertex.attribute(net_temp,"USECONS",value=ifelse(is.na(as.numeric(vertex_attributes$USECONS)),0,as.numeric(vertex_attributes$USECONS)))
> 
> 
> net<-net_temp
> 
> psp_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.PSP.csv"),row.names=1)
> all_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.csv"),row.names=1)
> npsp_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.NPSP.csv"),row.names=1)
> fina_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Fina.Up.Matrix.csv"),row.names=1)
> fina_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Fina.Down.Matrix.csv"),row.names=1)
> huma_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Huma.Up.Matrix.csv"),row.names=1)
> huma_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Huma.Down.Matrix.csv"),row.names=1)
> valu_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Valu.Up.Matrix.csv"),row.names=1)
> valu_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Value.Down.Matrix.csv"),row.names=1)
> lang_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Lang.Up.Matrix.csv"),row.names=1)
> lang_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Lang.Down.Matrix.csv"),row.names=1)
> scie_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Scie.Up.Matrix.csv"),row.names=1)
> scie_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Scie.Down.Matrix.csv"),row.names=1)
> face_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Face.Up.Matrix.csv"),row.names=1)
> face_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Face.Down.Matrix.csv"),row.names=1)
> 
> sppsp<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/SharedParticipationMatrixPSP.csv"),row.names=1)
> spn<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/SharedParticipationMatrixN.csv"),row.names=1)
> dppsp<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/DirectParticipationMatrixPSP.csv"),row.names=1)
> dpn<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/DirectParticipationMatrixN.csv"),row.names=1)
> ip<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/IndirectParticipation.csv"),row.names=1)
> 
> tname<-data.frame(network.vertex.names(net))
> colnames(tname)<-"Name"
> ww<-merge(tname,ip,by.x="Name",by.y="ORG",all.x=T)
> ww$TotPartpsp<-ifelse(is.na(ww$TotPartpsp),0,ww$TotPartpsp)
> ww$TotPartn<-ifelse(is.na(ww$TotPartn),0,ww$TotPartn)
> 
> set.vertex.attribute(net,"IPn",ww$TotPartn)
> set.vertex.attribute(net,"IPpsp",ww$TotPartpsp)
> set.vertex.attribute(net,"IPx",ww$TotPartn*ww$TotPartpsp)
> 
> set.vertex.attribute(x=net, attrname='allpart',
+                      value=get.vertex.attribute(net,'IPn')+get.vertex.attribute(net,'IPpsp'))
> set.vertex.attribute(net,'allpartdiv7',get.vertex.attribute(net,'allpart')/7) 
> set.vertex.attribute(net,'allpartdiv7quad',get.vertex.attribute(net,'allpartdiv7')^2) 
> set.vertex.attribute(net,'IPn7',get.vertex.attribute(net,'IPn')/7) 
> set.vertex.attribute(net,'IPpsp7',get.vertex.attribute(net,'IPpsp')/7) 
> set.vertex.attribute(net,'IPx7',get.vertex.attribute(net,'IPn7')*get.vertex.attribute(net,'IPpsp7')) 
> 
> colnames(spn)<-rownames(spn)
> colnames(sppsp)<-rownames(sppsp)
> colnames(dpn)<-rownames(dpn)
> colnames(dppsp)<-rownames(dppsp)
> 
> emp<-matrix(0,nrow=(network.size(net)),ncol=network.size(net))
> colnames(emp)<-network.vertex.names(net)
> rownames(emp)<-network.vertex.names(net)
> 
> fullmatrix<-function(netx,fm)
+ {
+   emp<-matrix(0,nrow=(network.size(netx)),ncol=network.size(netx))
+   colnames(emp)<-network.vertex.names(netx)
+   rownames(emp)<-network.vertex.names(netx)
+   for (i in 1:nrow(fm))
+   {
+     for (j in 1:ncol(fm))
+     {
+       r<-which(rownames(emp)==colnames(fm)[i])
+       c<-which(colnames(emp)==colnames(fm)[j])
+       emp[r,c]<-fm[i,j]
+     }}
+   new<-emp
+   return(new)
+ }
> 
> dpn<-fullmatrix(net,dpn)
> dppsp<-fullmatrix(net,dppsp)
> sppsp<-fullmatrix(net,sppsp)
> spn<-fullmatrix(net,spn)
> 
> g <- sum(net %e% "TVAL")/network.dyadcount(net)
> geo.init = log(1 - 1/(g+1))
> 
> as.mcmc.default <- coda:::as.mcmc.default
> as.mcmc.list.default <- coda:::as.mcmc.list.default
> 
> dpx <- dppsp * dpn
> spx <- sppsp * spn
> spn7 <- spn/7
> spx7 <- spx/7
> sppsp7 <- sppsp/7
> dpn7 <- dpn/7
> dpx7 <- dpx/7
> dppsp7 <- dppsp/7
> ipn_pt<-get.vertex.attribute(net,'IPn7')*as.sociomatrix(net,"PRIOR_TIE")
> ippsp_pt<-get.vertex.attribute(net,'IPpsp7')*as.sociomatrix(net,"PRIOR_TIE")
> ipx_pt<-get.vertex.attribute(net,'IPx7')*as.sociomatrix(net,"PRIOR_TIE")
> dpn_pt<-dpn7*as.sociomatrix(net,"PRIOR_TIE")
> dppsp_pt<-dppsp7*as.sociomatrix(net,"PRIOR_TIE")
> dpx_pt<-dpx7*as.sociomatrix(net,"PRIOR_TIE")
> spn_pt<-spn7*as.sociomatrix(net,"PRIOR_TIE")
> sppsp_pt<-sppsp7*as.sociomatrix(net,"PRIOR_TIE")
> spx_pt<-spx7*as.sociomatrix(net,"PRIOR_TIE")
> all_sp_quad<-((spn7+sppsp7)^2)
> all_sp_pt<-((spn7+sppsp7)*as.sociomatrix(net,"PRIOR_TIE"))
> all_sp<-(spn7+sppsp7)
> central.actors = c('Federal_Agency','State_Agency','Regional_Commission')
> set.vertex.attribute(net,attrname = 'Central',
+                      value = ifelse(get.vertex.attribute(net,'ORGTYPE') %in% central.actors,1,0))
> 
> #########RUN MODEL###############
> form_base = net~sum+
+   mutual(form="min")+
+   transitiveweights(twopath="min",combine="max",affect="min")+
+   nodecov("NUMRESP")+
+   nodecov("NUMGROUPS")+
+   nodecov("MEANYEARS")+
+   nodematch("ORGTYPE",diff=FALSE)
>   
> npar = length(summary(form_base,response='TVAL'))-1
> 
> mod_base <-
+   ergm(form_base,
+        response="TVAL", reference=~DiscUnif(0,3),
+        control=control.ergm(init=c(geo.init, rep(0, npar)),
+                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
+                             MCMLE.trustregion=1000,MCMC.addto.se=T,
+                             parallel.type="PSOCK",parallel=8,
+                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
+                             MCMC.burnin=10000,MCMC.interval=1500,
+                             MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
Evaluating network in model
Initializing Metropolis-Hastings proposal(s): ergm:MH_DiscUnif
Initializing model.
Fitting initial model.
Fitting ERGM.
Density guard set to 20989 from an initial count of 1045  edges.
Iteration 1 of at most 30 with parameter: 
                          sum                    mutual.min 
                    -3.091141                      0.000000 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                     0.000000                      0.000000 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                     0.000000                      0.000000 
        nodematch.sum.ORGTYPE 
                     0.000000 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     -6.99390                    -267.43274 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -619.01716                   -7567.81588 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -73.43428                   -6314.56275 
        nodematch.sum.ORGTYPE 
                    -27.95288 
Average estimating equation values:
                          sum                    mutual.min 
                     -6.99390                    -267.43274 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -619.01716                   -7567.81588 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -73.43428                   -6314.56275 
        nodematch.sum.ORGTYPE 
                    -27.95288 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.397191725671292  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 48.79 
Iteration 2 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.1992480315                  0.5747329695 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1482881963                  0.0005037335 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0006957045                 -0.0005559923 
        nodematch.sum.ORGTYPE 
                 0.0203515259 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    167.27012                    -221.68286 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -354.62406                   -7023.25568 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1441.39782                   -3445.68238 
        nodematch.sum.ORGTYPE 
                    -10.34758 
Average estimating equation values:
                          sum                    mutual.min 
                    167.27012                    -221.68286 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -354.62406                   -7023.25568 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1441.39782                   -3445.68238 
        nodematch.sum.ORGTYPE 
                    -10.34758 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0506670027971268  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 5.896 
Iteration 3 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.3298618181                  0.7066013652 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1703469956                  0.0246202070 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                -0.0004569345                  0.0002119284 
        nodematch.sum.ORGTYPE 
                 0.0345312374 
Using PSOCK.
Failed to attach ergm on the slave nodes from the same location as the master node. Will try to load from anywhere in the library path.
Error in ergm.getCluster(control, verbose) : 
  Failed to attach ergm on one or more slave nodes. Make sure it's installed on or accessible from all of them and is in the library path.
Calls: ergm ... ergm.MCMLE -> ergm.getMCMCsample -> ergm.getCluster
In addition: Warning message:
In all(attached) : coercing argument of type 'list' to logical
Execution halted
