
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> 
> library(Rglpk)
Loading required package: slam
Using the GLPK callable library version 4.55
> require(statnet)
Loading required package: statnet
Loading required package: network
network: Classes for Relational Data
Version 1.12.0 created on 2015-03-04.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

Loading required package: ergm
Loading required package: statnet.common

ergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-2 created on 2014-01-13.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:network’:

    %c%

Loading required package: networkDynamic

networkDynamic: version 0.7.1, created on 2014-09-29
Copyright (c) 2014, Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll, University of Washington
                    with contributions from
                    Zack Almquist, University of California -- Irvine
                    David R. Hunter, Penn State University
                    Li Wang
                    Kirk Li, University of Washington
                    Steven M. Goodreau, University of Washington
                    Jeffrey Horner
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("networkDynamic").

Loading required package: tergm

tergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    David R. Hunter, Penn State University
                    Steven M. Goodreau, University of Washington
                    Martina Morris, University of Washington
                    Nicole Bohme Carnegie, New York University
                    Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Skye Bender-deMoll
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("tergm").

Loading required package: ergm.count

ergm.count: version 3.1.1, created on 2013-03-29
Copyright (c) 2013, Pavel N. Krivitsky, University of Wollongong
                    with contributions from
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.count").

Loading required package: latentnet

latentnet: version 2.7.0, created on 2015-03-21
Copyright (c) 2015, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    Susan M. Shortreed
                    Jeremy Tantrum
                    Peter D. Hoff
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("latentnet").
NOTE: BIC calculation prior latentnet 2.7.0 had a bug in the calculation of the effective number of parameters. See help(summary.ergmm) for details.

statnet: version 2014.2.0, created on 2014-02-05
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("statnet").

> library(ergm)
> library(RCurl)
Loading required package: bitops
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:network’:

    is.discrete

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following object is masked from ‘package:stats’:

    filter

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(snow)
> library(rlecuyer)
> library(reshape2)
> library(ggplot2)
> 
> 
> ####PREPARE DATA#############
> dat_all <- read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/edgelist_all.csv"),row.names=1)
> 
> # Read a csv file into a data frame
> 
> #dat_all=read.csv(file="edgelist_all.csv",row.names=1)
> temp<-dat_all[as.character(dat_all$ORG)!=as.character(dat_all$Contact),]
> 
> temp$paste<-paste(temp$ORG,temp$Contact)
> 
> temptab<-data.frame(table(temp$paste))
> colnames(temptab) = c('paste','Freq')
> 
> temp$count = temptab$Freq[match(temp$paste,temptab$paste)]
> 
> t<-temp[order(temp$TType,decreasing=T),]
> 
> tt<-t[!duplicated(t$paste),]
> 
> resp.dat=read.csv(text = getURL('https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Response.Used.csv')
+    ,row.names=1)
>                            
> 
> allorgs<-sort(unique(c(as.character(resp.dat$ORG),as.character(tt$ORG),as.character(tt$Contact))))
> 
> tt$INSURV<-tt$Contact %in% resp.dat$ORG
> 
> t1<-tt[tt$INSURV==TRUE,]
> 
> net_temp = network.initialize(length(unique(resp.dat$ORG)),directed=TRUE,loops=FALSE)
> vertex_attributes  = data.frame(sort(unique(resp.dat$ORG)))
> colnames(vertex_attributes) = "NAME"
> network.vertex.names(net_temp)<-as.character(vertex_attributes$NAME)
> 
> TAIL_ID = match(t1$ORG,network.vertex.names(net_temp))
> HEAD_ID = match(t1$Contact,network.vertex.names(net_temp))
> 
> for (i in 1:length(TAIL_ID))
+ {
+   net_temp[TAIL_ID[i],HEAD_ID[i]]<-1
+   net_temp[TAIL_ID[i],HEAD_ID[i],"TCO"]<-t1$count[i]
+   net_temp[TAIL_ID[i],HEAD_ID[i],"TVAL"]<-ifelse(t1$TType[i]=="WT",
+                                                  3,ifelse(t1$TType[i]=="PT",2,1))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"WIN5_dk1"]<-ifelse(is.na(t1$WIN5[i]),1,(ifelse(t1$WIN5[i]>0,1,t1$WIN5)))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"WIN5_dk0"]<-ifelse(is.na(t1$WIN5[i]),0,(ifelse(t1$WIN5[i]==1,1,0)))
+   net_temp[TAIL_ID[i],HEAD_ID[i],"PRIOR_TIE"]<-ifelse(is.na(t1$WIN5[i]),0,(ifelse(t1$WIN5[i]>0,0,1)))
+ }
> 
> 
> vertex_attributes$TOTALYEARS = resp.dat$total.years[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> vertex_attributes$NUMGROUPS = data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(NumGroups)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(NumGroups)))[,1])]
> 
> vertex_attributes$NUMRESP = data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Numres)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Numres)))[,1])]
> 
> vertex_attributes$MEANYEARS= data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Years)))[,2][
+   match(vertex_attributes$NAME, data.frame(resp.dat %>% group_by(ORG) %>% summarise(mean(Years)))[,1])]
> 
> vertex_attributes$ORGTYPE = resp.dat$ORGType[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> vertex_attributes$USEPLAN = resp.dat$useful_plan[match(vertex_attributes$NAME,resp.dat$ORG)]
> vertex_attributes$USEWORK = resp.dat$useful_work[match(vertex_attributes$NAME,resp.dat$ORG)]
> vertex_attributes$USECONS = resp.dat$useful_cons[match(vertex_attributes$NAME,resp.dat$ORG)]
> 
> 
> temp = as.data.frame(tapply(resp.dat$npsp,resp.dat$ORG,mean))
> temp$ORG = rownames(temp)
> colnames(temp)[1] = 'npsp.mean'
> resp.dat$npsp = as.vector(temp$npsp.mean[match(resp.dat$ORG,temp$ORG)])
> 
> temp = as.data.frame(tapply(resp.dat$psp,resp.dat$ORG,mean))
> temp$ORG = rownames(temp)
> colnames(temp)[1] = 'psp.mean'
> resp.dat$psp = as.vector(temp$psp.mean[match(resp.dat$ORG,temp$ORG)])
> 
> vertex_attributes$PSP_N = as.vector(
+   tapply(resp.dat$psp,resp.dat$ORG,mean)[match(vertex_attributes$NAME, rownames(tapply(resp.dat$psp,resp.dat$ORG,mean)))])
> 
> vertex_attributes$NPSP_N = as.vector(
+   tapply(resp.dat$psp,resp.dat$ORG,mean)[match(vertex_attributes$NAME, rownames(tapply(resp.dat$npsp,resp.dat$ORG,mean)))])
> 
> 
> network.vertex.names(net_temp) = as.character(vertex_attributes$NAME)
> 
> set.vertex.attribute(net_temp,"ORGTYPE",value=as.character(vertex_attributes$ORGTYPE))
> set.vertex.attribute(net_temp,"TOTALYEARS",value=vertex_attributes$TOTALYEARS)
> set.vertex.attribute(net_temp,"NUMGROUPS",value=vertex_attributes$NUMGROUPS)
> set.vertex.attribute(net_temp,"NUMRESP",value=vertex_attributes$NUMRESP)
> set.vertex.attribute(net_temp,"MEANYEARS",value=vertex_attributes$MEANYEARS)
> set.vertex.attribute(net_temp,"PSP_N",    value=vertex_attributes$PSP_N)
> set.vertex.attribute(net_temp,"NPSP_N",value=vertex_attributes$NPSP_N)
> set.vertex.attribute(net_temp,"USEWORK",value=ifelse(is.na(as.numeric(vertex_attributes$USEWORK)),0,as.numeric(vertex_attributes$USEWORK)))
> set.vertex.attribute(net_temp,"USEPLAN",value=ifelse(is.na(as.numeric(vertex_attributes$USEPLAN)),0,as.numeric(vertex_attributes$USEPLAN)))
> set.vertex.attribute(net_temp,"USECONS",value=ifelse(is.na(as.numeric(vertex_attributes$USECONS)),0,as.numeric(vertex_attributes$USECONS)))
> 
> 
> net<-net_temp
> 
> psp_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.PSP.csv"),row.names=1)
> all_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.csv"),row.names=1)
> npsp_group <-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Overlap.Matrix.NPSP.csv"),row.names=1)
> fina_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Fina.Up.Matrix.csv"),row.names=1)
> fina_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Fina.Down.Matrix.csv"),row.names=1)
> huma_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Huma.Up.Matrix.csv"),row.names=1)
> huma_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Huma.Down.Matrix.csv"),row.names=1)
> valu_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Valu.Up.Matrix.csv"),row.names=1)
> valu_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Value.Down.Matrix.csv"),row.names=1)
> lang_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Lang.Up.Matrix.csv"),row.names=1)
> lang_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Lang.Down.Matrix.csv"),row.names=1)
> scie_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Scie.Up.Matrix.csv"),row.names=1)
> scie_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Scie.Down.Matrix.csv"),row.names=1)
> face_up_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Face.Up.Matrix.csv"),row.names=1)
> face_down_group<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/Group.Face.Down.Matrix.csv"),row.names=1)
> 
> sppsp<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/SharedParticipationMatrixPSP.csv"),row.names=1)
> spn<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/SharedParticipationMatrixN.csv"),row.names=1)
> dppsp<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/DirectParticipationMatrixPSP.csv"),row.names=1)
> dpn<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/DirectParticipationMatrixN.csv"),row.names=1)
> ip<-read.csv(text = getURL("https://raw.githubusercontent.com/tylerascott/elwha/master/data_files/IndirectParticipation.csv"),row.names=1)
> 
> tname<-data.frame(network.vertex.names(net))
> colnames(tname)<-"Name"
> ww<-merge(tname,ip,by.x="Name",by.y="ORG",all.x=T)
> ww$TotPartpsp<-ifelse(is.na(ww$TotPartpsp),0,ww$TotPartpsp)
> ww$TotPartn<-ifelse(is.na(ww$TotPartn),0,ww$TotPartn)
> 
> set.vertex.attribute(net,"IPn",ww$TotPartn)
> set.vertex.attribute(net,"IPpsp",ww$TotPartpsp)
> set.vertex.attribute(net,"IPx",ww$TotPartn*ww$TotPartpsp)
> 
> set.vertex.attribute(x=net, attrname='allpart',
+                      value=get.vertex.attribute(net,'IPn')+get.vertex.attribute(net,'IPpsp'))
> set.vertex.attribute(net,'allpartdiv7',get.vertex.attribute(net,'allpart')/7) 
> set.vertex.attribute(net,'allpartdiv7quad',get.vertex.attribute(net,'allpartdiv7')^2) 
> set.vertex.attribute(net,'IPn7',get.vertex.attribute(net,'IPn')/7) 
> set.vertex.attribute(net,'IPpsp7',get.vertex.attribute(net,'IPpsp')/7) 
> set.vertex.attribute(net,'IPx7',get.vertex.attribute(net,'IPn7')*get.vertex.attribute(net,'IPpsp7')) 
> 
> colnames(spn)<-rownames(spn)
> colnames(sppsp)<-rownames(sppsp)
> colnames(dpn)<-rownames(dpn)
> colnames(dppsp)<-rownames(dppsp)
> 
> emp<-matrix(0,nrow=(network.size(net)),ncol=network.size(net))
> colnames(emp)<-network.vertex.names(net)
> rownames(emp)<-network.vertex.names(net)
> 
> fullmatrix<-function(netx,fm)
+ {
+   emp<-matrix(0,nrow=(network.size(netx)),ncol=network.size(netx))
+   colnames(emp)<-network.vertex.names(netx)
+   rownames(emp)<-network.vertex.names(netx)
+   for (i in 1:nrow(fm))
+   {
+     for (j in 1:ncol(fm))
+     {
+       r<-which(rownames(emp)==colnames(fm)[i])
+       c<-which(colnames(emp)==colnames(fm)[j])
+       emp[r,c]<-fm[i,j]
+     }}
+   new<-emp
+   return(new)
+ }
> 
> dpn<-fullmatrix(net,dpn)
> dppsp<-fullmatrix(net,dppsp)
> sppsp<-fullmatrix(net,sppsp)
> spn<-fullmatrix(net,spn)
> 
> g <- sum(net %e% "TVAL")/network.dyadcount(net)
> geo.init = log(1 - 1/(g+1))
> 
> as.mcmc.default <- coda:::as.mcmc.default
> as.mcmc.list.default <- coda:::as.mcmc.list.default
> 
> dpx <- dppsp * dpn
> spx <- sppsp * spn
> spn7 <- spn/7
> spx7 <- spx/7
> sppsp7 <- sppsp/7
> dpn7 <- dpn/7
> dpx7 <- dpx/7
> dppsp7 <- dppsp/7
> ipn_pt<-get.vertex.attribute(net,'IPn7')*as.sociomatrix(net,"PRIOR_TIE")
> ippsp_pt<-get.vertex.attribute(net,'IPpsp7')*as.sociomatrix(net,"PRIOR_TIE")
> ipx_pt<-get.vertex.attribute(net,'IPx7')*as.sociomatrix(net,"PRIOR_TIE")
> dpn_pt<-dpn7*as.sociomatrix(net,"PRIOR_TIE")
> dppsp_pt<-dppsp7*as.sociomatrix(net,"PRIOR_TIE")
> dpx_pt<-dpx7*as.sociomatrix(net,"PRIOR_TIE")
> spn_pt<-spn7*as.sociomatrix(net,"PRIOR_TIE")
> sppsp_pt<-sppsp7*as.sociomatrix(net,"PRIOR_TIE")
> spx_pt<-spx7*as.sociomatrix(net,"PRIOR_TIE")
> all_sp_quad<-((spn7+sppsp7)^2)
> all_sp_pt<-((spn7+sppsp7)*as.sociomatrix(net,"PRIOR_TIE"))
> all_sp<-(spn7+sppsp7)
> central.actors = c('Federal_Agency','State_Agency','Regional_Commission')
> set.vertex.attribute(net,attrname = 'Central',
+                      value = ifelse(get.vertex.attribute(net,'ORGTYPE') %in% central.actors,1,0))
> 
> ##########RUN MODEL###############
> # form_base = net~sum+
> #   mutual(form="min")+
> #   transitiveweights(twopath="min",combine="max",affect="min")+
> #   nodecov("NUMRESP")+
> #   nodecov("NUMGROUPS")+
> #   nodecov("MEANYEARS")+
> #   nodematch("ORGTYPE",diff=FALSE)
> #   
> # npar = length(summary(form_base,response='TVAL'))-1
> 
> # mod_base <-
> #   ergm(form_base,
> #        response="TVAL", reference=~DiscUnif(0,3),
> #        control=control.ergm(init=c(geo.init, rep(0, npar)),
> #                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                             MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                             parallel.type="PSOCK",parallel=8,
> #                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                             MCMC.burnin=10000,MCMC.interval=1500,
> #                             MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
> 
> # 
> # form_dirpart = net~sum+
> #   mutual(form="min")+
> #   transitiveweights(twopath="min",combine="max",affect="min")+
> #   nodecov("NUMRESP")+
> #   nodecov("NUMGROUPS")+
> #   nodecov("MEANYEARS")+
> #   nodematch("ORGTYPE",diff=FALSE)+
> #   edgecov(dpn7,form='sum')+edgecov(dppsp7,form='sum')+edgecov(dpx7,form='sum')
> # 
> # npar = length(summary(form_dirpart,response='TVAL'))-1
> 
> # mod_dirpart <-
> #   ergm(form_dirpart,
> #        response="TVAL", reference=~DiscUnif(0,3),
> #        control=control.ergm(init=c(geo.init, rep(0, npar)),
> #                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                             MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                             parallel.type="PSOCK",parallel=8,
> #                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                             MCMC.burnin=10000,MCMC.interval=1500,
> #                             MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
> # 
> # save.image('result_dirpart.RData')
> 
> # 
> # form_indpart = net~sum+
> #   mutual(form="min")+
> #   transitiveweights(twopath="min",combine="max",affect="min")+
> #   nodecov("NUMRESP")+
> #   nodecov("NUMGROUPS")+
> #   nodecov("MEANYEARS")+
> #   nodematch("ORGTYPE",diff=FALSE)+
> #   nodecov('IPn7')+nodecov('IPpsp7')+nodecov('IPx7')
> # 
> # npar = length(summary(form_indpart,response='TVAL'))-1
> # 
> # 
> # mod_indpart<-
> #   ergm(form_indpart,
> #        response="TVAL", reference=~DiscUnif(0,3),
> #        control=control.ergm(init=c(geo.init, rep(0, npar)),
> #                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                             MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                             parallel.type="PSOCK",parallel=8,
> #                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                             MCMC.burnin=10000,MCMC.interval=1500,
> #                             MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
> #          
> # 
> # save.image('result_indpart.RData')
> 
> 
> form_shapart = net~sum+
+   mutual(form="min")+
+   transitiveweights(twopath="min",combine="max",affect="min")+
+   nodecov("NUMRESP")+
+   nodecov("NUMGROUPS")+
+   nodecov("MEANYEARS")+
+   nodematch("ORGTYPE",diff=FALSE)+
+   edgecov(spn7,form='sum')+edgecov(sppsp7,form='sum')+edgecov(spx7,form='sum')
> 
> npar = length(summary(form_shapart,response='TVAL'))-1
> 
> 
> mod_shapart<-
+   ergm(form_shapart,
+        response="TVAL", reference=~DiscUnif(0,3),
+        control=control.ergm(init=c(geo.init, rep(0, npar)),
+                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
+                             MCMLE.trustregion=1000,MCMC.addto.se=T,
+                             parallel.type="PSOCK",parallel=8,
+                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
+                             MCMC.burnin=10000,MCMC.interval=1500,
+                             MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
Evaluating network in model
Initializing Metropolis-Hastings proposal(s): ergm:MH_DiscUnif
Initializing model.
Fitting initial model.
Fitting ERGM.
Density guard set to 20989 from an initial count of 1045  edges.
Iteration 1 of at most 30 with parameter: 
                          sum                    mutual.min 
                    -3.091141                      0.000000 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                     0.000000                      0.000000 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                     0.000000                      0.000000 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     0.000000                      0.000000 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                     0.000000                      0.000000 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     -6.99390                    -267.43274 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -619.01716                   -7567.81588 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -73.43428                   -6314.56275 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -27.95288                   -1440.48671 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -694.96697                   -5408.72457 
Average estimating equation values:
                          sum                    mutual.min 
                     -6.99390                    -267.43274 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -619.01716                   -7567.81588 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -73.43428                   -6314.56275 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -27.95288                   -1440.48671 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -694.96697                   -5408.72457 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.379192113876344  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 44.78 
Iteration 2 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.1748325086                  0.5282948335 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1407918609                 -0.0034731398 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0008808133                 -0.0007096968 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                 0.0133740032                 -0.0040445128 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                -0.0354107635                  0.0127747359 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    158.49094                    -226.07486 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -369.19250                   -7106.44346 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1376.89471                   -3664.97741 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -11.72868                   -1437.77092 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -694.64779                   -5390.28596 
Average estimating equation values:
                          sum                    mutual.min 
                    158.49094                    -226.07486 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -369.19250                   -7106.44346 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1376.89471                   -3664.97741 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -11.72868                   -1437.77092 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -694.64779                   -5390.28596 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0267244204878807  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 4.731 
Iteration 3 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.2375276879                  0.6036800561 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1572147776                  0.0024888090 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0007825061                 -0.0007887981 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                 0.0062704459                  0.1310617920 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                 0.1378545641                  0.0061536131 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    154.88816                    -218.33052 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -359.69720                   -6846.04680 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1382.78873                   -3614.80032 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -14.22514                   -1386.24122 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -671.35901                   -5173.29701 
Average estimating equation values:
                          sum                    mutual.min 
                    154.88816                    -218.33052 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -359.69720                   -6846.04680 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1382.78873                   -3614.80032 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -14.22514                   -1386.24122 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -671.35901                   -5173.29701 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0370469838380814  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 5.646 
Iteration 4 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.317904250                   0.697048272 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.176526638                   0.008554540 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                  0.001197026                  -0.000423740 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.011606472                   0.244906981 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  0.360183935                  -0.010166593 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    152.03810                    -208.23962 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -339.79254                   -6527.60872 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1448.36469                   -3431.42308 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -13.75534                   -1323.14548 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -639.32860                   -4949.96927 
Average estimating equation values:
                          sum                    mutual.min 
                    152.03810                    -208.23962 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -339.79254                   -6527.60872 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1448.36469                   -3431.42308 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                    -13.75534                   -1323.14548 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -639.32860                   -4949.96927 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0447109267115593  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 4.679 
Iteration 5 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.3983103652                  0.7927336552 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1962389808                  0.0148839873 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0015827943                 -0.0001231719 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                 0.0449341564                  0.3175188732 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                 0.4821807346                 -0.0194349776 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    154.73622                    -196.43888 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -308.60270                   -6168.41500 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1514.92429                   -3159.11621 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -7.38248                   -1259.91017 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -608.61920                   -4707.72098 
Average estimating equation values:
                          sum                    mutual.min 
                    154.73622                    -196.43888 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -308.60270                   -6168.41500 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1514.92429                   -3159.11621 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -7.38248                   -1259.91017 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -608.61920                   -4707.72098 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0584332495927811  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 6.018 
Iteration 6 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.4637038873                  0.8803480408 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.2147077331                  0.0216423893 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                -0.0001859160                  0.0001095625 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                 0.0592595276                  0.3879022325 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                 0.6295972536                 -0.0301967334 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    153.91846                    -180.60692 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -280.74280                   -5715.60388 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1454.03758                   -2885.51267 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -3.14216                   -1178.45411 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -564.03635                   -4398.48693 
Average estimating equation values:
                          sum                    mutual.min 
                    153.91846                    -180.60692 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -280.74280                   -5715.60388 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1454.03758                   -2885.51267 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -3.14216                   -1178.45411 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -564.03635                   -4398.48693 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0647720098495485  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 4.317 
Iteration 7 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.523413624                   0.923248758 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.229496707                   0.027254805 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.002302917                   0.001020594 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.084840604                   0.425811787 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  0.718196015                  -0.034814142 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    143.80348                    -169.69478 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -259.65020                   -5337.18600 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1282.14910                   -2601.92194 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      0.41698                   -1110.11937 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -529.21779                   -4122.05786 
Average estimating equation values:
                          sum                    mutual.min 
                    143.80348                    -169.69478 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -259.65020                   -5337.18600 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1282.14910                   -2601.92194 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      0.41698                   -1110.11937 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -529.21779                   -4122.05786 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0837537571787835  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 5.741 
Iteration 8 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.583370244                   0.968370856 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.243172925                   0.030895957 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.003252321                   0.001411165 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.098982016                   0.493042170 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  0.829136015                  -0.043968904 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    125.89636                    -154.43146 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -247.33596                   -4918.70118 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1121.03653                   -2630.52181 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -0.29116                   -1015.77677 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -476.40539                   -3773.93466 
Average estimating equation values:
                          sum                    mutual.min 
                    125.89636                    -154.43146 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -247.33596                   -4918.70118 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1121.03653                   -2630.52181 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                     -0.29116                   -1015.77677 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                   -476.40539                   -3773.93466 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0869484320282937  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 4.337 
Iteration 9 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.653592160                   1.000049230 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.260686047                   0.035142624 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.003881273                   0.002454869 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.096734444                   0.538743132 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  0.896100701                  -0.049524997 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     124.8698                     -139.1698 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -211.9954                    -4405.8463 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1105.9568                    -2062.1116 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      -4.2101                     -925.7931 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                    -432.6314                    -3408.3659 
Average estimating equation values:
                          sum                    mutual.min 
                     124.8698                     -139.1698 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -211.9954                    -4405.8463 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1105.9568                    -2062.1116 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      -4.2101                     -925.7931 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                    -432.6314                    -3408.3659 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0920330286026002  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 4.063 
Iteration 10 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.709722930                   1.019278694 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.274754763                   0.037759234 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.004470141                   0.002921224 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.109608732                   0.592866607 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  0.973670503                  -0.055753300 
Using PSOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     119.9294                     -122.9662 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -181.4713                    -3936.2115 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1063.0419                    -1735.2224 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      -0.8707                     -828.8026 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                    -385.5346                    -3056.1726 
Average estimating equation values:
                          sum                    mutual.min 
                     119.9294                     -122.9662 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -181.4713                    -3936.2115 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1063.0419                    -1735.2224 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                      -0.8707                     -828.8026 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                    -385.5346                    -3056.1726 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.113527059555054  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
The log-likelihood improved by 3.976 
Iteration 11 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.765132870                   1.036464465 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.278622142                   0.041197917 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.004581473                   0.003334266 
        nodematch.sum.ORGTYPE              edgecov.spn7.sum 
                  0.115594912                   0.647960792 
           edgecov.sppsp7.sum              edgecov.spx7.sum 
                  1.034112244                  -0.063196914 
Using PSOCK.
Failed to attach ergm on the slave nodes from the same location as the master node. Will try to load from anywhere in the library path.
Error in ergm.getCluster(control, verbose) : 
  Failed to attach ergm on one or more slave nodes. Make sure it's installed on or accessible from all of them and is in the library path.
Calls: ergm ... ergm.MCMLE -> ergm.getMCMCsample -> ergm.getCluster
In addition: Warning message:
In all(attached) : coercing argument of type 'list' to logical
Execution halted
