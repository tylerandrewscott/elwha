
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #rm(list=ls())
> #rm(list=ls())
> install.packages('Rglpk')
Installing package into ‘/homes/tscott1/R/x86_64-pc-linux-gnu-library/3.2’
(as ‘lib’ is unspecified)
trying URL 'http://cran.fhcrc.org/src/contrib/Rglpk_0.6-0.tar.gz'
Content type 'application/x-gzip' length 18284 bytes (17 KB)
==================================================
downloaded 17 KB

* installing *source* package ‘Rglpk’ ...
** package ‘Rglpk’ successfully unpacked and MD5 sums checked
** libs
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -O2 -pipe -g  -c Rglpk_initialize.c -o Rglpk_initialize.o
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -O2 -pipe -g  -c Rglpk_read_file.c -o Rglpk_read_file.o
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -O2 -pipe -g  -c Rglpk_solve.c -o Rglpk_solve.o
gcc -std=gnu99 -shared -L/usr/lib/R/lib -Wl,-z,relro -o Rglpk.so Rglpk_initialize.o Rglpk_read_file.o Rglpk_solve.o -lglpk -L/usr/lib/R/lib -lR
installing to /homes/tscott1/R/x86_64-pc-linux-gnu-library/3.2/Rglpk/libs
** R
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (Rglpk)

The downloaded source packages are in
	‘/tmp/Rtmp6Gxlb9/downloaded_packages’
> require(statnet)
Loading required package: statnet
Loading required package: network
network: Classes for Relational Data
Version 1.12.0 created on 2015-03-04.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

Loading required package: ergm
Loading required package: statnet.common

ergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-2 created on 2014-01-13.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:network’:

    %c%

Loading required package: networkDynamic

networkDynamic: version 0.7.1, created on 2014-09-29
Copyright (c) 2014, Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll, University of Washington
                    with contributions from
                    Zack Almquist, University of California -- Irvine
                    David R. Hunter, Penn State University
                    Li Wang
                    Kirk Li, University of Washington
                    Steven M. Goodreau, University of Washington
                    Jeffrey Horner
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("networkDynamic").

Loading required package: tergm

tergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    David R. Hunter, Penn State University
                    Steven M. Goodreau, University of Washington
                    Martina Morris, University of Washington
                    Nicole Bohme Carnegie, New York University
                    Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Skye Bender-deMoll
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("tergm").

Loading required package: ergm.count

ergm.count: version 3.1.1, created on 2013-03-29
Copyright (c) 2013, Pavel N. Krivitsky, University of Wollongong
                    with contributions from
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.count").

Loading required package: latentnet

latentnet: version 2.7.0, created on 2015-03-21
Copyright (c) 2015, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    Susan M. Shortreed
                    Jeremy Tantrum
                    Peter D. Hoff
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("latentnet").
NOTE: BIC calculation prior latentnet 2.7.0 had a bug in the calculation of the effective number of parameters. See help(summary.ergmm) for details.

statnet: version 2014.2.0, created on 2014-02-05
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("statnet").

> library(snow)
> library(rlecuyer)
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:network’:

    is.discrete

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following object is masked from ‘package:stats’:

    filter

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape2)
> #setwd('H:/passtosim')
> #setwd("//Users/TScott/Google Drive/elwha")
> #setwd('H:/elwha/Dissert_Scripts/')
> 
> setwd('/homes/tscott1/win/user/elwha/PSJ_Submission/Version3/min_versions')
> load('NetworkReady.RData')
> #load('Ready_to_ERGM.RData')
> g <- sum(net %e% "TVAL")/network.dyadcount(net)
> init.geo<-log(1 - 1/(g+1))
> geo.init = init.geo
> 
> as.mcmc.default <- coda:::as.mcmc.default
> as.mcmc.list.default <- coda:::as.mcmc.list.default
> 
> dpx <- dppsp * dpn
> spx <- sppsp * spn
> spn7 <- spn/7
> spx7 <- spx/7
> sppsp7 <- sppsp/7
> dpn7 <- dpn/7
> dpx7 <- dpx/7
> dppsp7 <- dppsp/7
> ipn_pt<-get.vertex.attribute(net,'IPn7')*as.sociomatrix(net,"PRIOR_TIE")
> ippsp_pt<-get.vertex.attribute(net,'IPpsp7')*as.sociomatrix(net,"PRIOR_TIE")
> ipx_pt<-get.vertex.attribute(net,'IPx7')*as.sociomatrix(net,"PRIOR_TIE")
> dpn_pt<-dpn7*as.sociomatrix(net,"PRIOR_TIE")
> dppsp_pt<-dppsp7*as.sociomatrix(net,"PRIOR_TIE")
> dpx_pt<-dpx7*as.sociomatrix(net,"PRIOR_TIE")
> spn_pt<-spn7*as.sociomatrix(net,"PRIOR_TIE")
> sppsp_pt<-sppsp7*as.sociomatrix(net,"PRIOR_TIE")
> spx_pt<-spx7*as.sociomatrix(net,"PRIOR_TIE")
> all_sp_quad<-((spn7+sppsp7)^2)
> all_sp_pt<-((spn7+sppsp7)*as.sociomatrix(net,"PRIOR_TIE"))
> all_sp<-(spn7+sppsp7)
> central.actors = c('Federal_Agency','State_Agency','Regional_Commission')
> set.vertex.attribute(net,attrname = 'Central',
+                      value = ifelse(get.vertex.attribute(net,'ORGTYPE') %in% central.actors,1,0))
> 
> 
> form_base = net~sum+
+  nonzero+
+   mutual(form="min")+
+   transitiveweights(twopath="min",combine="max",affect="min")+
+   nodecov("NUMRESP")+
+   nodecov("NUMGROUPS")+
+   nodecov("MEANYEARS")+
+   nodematch("ORGTYPE",diff=FALSE)+
+  nodefactor('Central')
>   
> npar = length(summary(form_base,response='TVAL'))-1
> 
> 
>   
> mod_base <-
+   ergm(form_base,
+        response="TVAL", reference=~DiscUnif(0,3),
+        control=control.ergm(init=c(geo.init, rep(0, npar)),
+                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
+                             MCMLE.trustregion=1000,MCMC.addto.se=T,
+                             parallel.type="SOCK",parallel=8,
+                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=200000,
+                             MCMC.burnin=15000,MCMC.interval=1500,MCMLE.steplength=.25,
+                             MCMC.prop.args=list(p0=0.5)),eval.loglik=T,verbose=T)
Evaluating network in model
Initializing Metropolis-Hastings proposal(s): ergm:MH_DiscUnif
Initializing model.
Fitting initial model.
Fitting ERGM.
Density guard set to 20989 from an initial count of 1045  edges.
Iteration 1 of at most 30 with parameter: 
                          sum                       nonzero 
                    -3.091141                      0.000000 
                   mutual.min transitiveweights.min.max.min 
                     0.000000                      0.000000 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                     0.000000                      0.000000 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                     0.000000                      0.000000 
     nodefactor.sum.Central.1 
                     0.000000 
Using SOCK.
Sample size = 200000 by 25000 
Back from unconstrained MCMC. Average statistics:
                          sum                       nonzero 
                     -3.88177                    1159.76813 
                   mutual.min transitiveweights.min.max.min 
                   -268.31162                    -617.71673 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -7610.34573                     -25.22701 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -6295.27055                     -28.03383 
     nodefactor.sum.Central.1 
                   -580.49771 
Average estimating equation values:
                          sum                       nonzero 
                     -3.88177                    1159.76813 
                   mutual.min transitiveweights.min.max.min 
                   -268.31162                    -617.71673 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -7610.34573                     -25.22701 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -6295.27055                     -28.03383 
     nodefactor.sum.Central.1 
                   -580.49771 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.25  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 70.3 
Step length converged once. Increasing MCMC sample size.
Iteration 2 of at most 30 with parameter: 
                          sum                       nonzero 
                -2.8079862373                 -0.3869745752 
                   mutual.min transitiveweights.min.max.min 
                 0.4119793058                  0.1748206539 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                -0.0120138008                  0.0003934282 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                -0.0001661084                 -0.0076370705 
     nodefactor.sum.Central.1 
                -0.0229775350 
Using SOCK.
Sample size = 800000 by 1e+05 
Back from unconstrained MCMC. Average statistics:
                          sum                       nonzero 
                    185.40412                    1312.20309 
                   mutual.min transitiveweights.min.max.min 
                   -234.92908                    -364.33143 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -7155.38787                    1587.54678 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -3197.81211                     -12.14219 
     nodefactor.sum.Central.1 
                   -562.75916 
Average estimating equation values:
                          sum                       nonzero 
                    185.40412                    1312.20309 
                   mutual.min transitiveweights.min.max.min 
                   -234.92908                    -364.33143 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -7155.38787                    1587.54678 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -3197.81211                     -12.14219 
     nodefactor.sum.Central.1 
                   -562.75916 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0271394848823547  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 8.084 
Iteration 3 of at most 30 with parameter: 
                          sum                       nonzero 
                -2.6467161375                 -0.7313426045 
                   mutual.min transitiveweights.min.max.min 
                 0.5190582199                  0.2562190931 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                 0.0027435925                  0.0002115472 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                 0.0001586244                  0.0003842359 
     nodefactor.sum.Central.1 
                -0.0017550737 
Using SOCK.
Sample size = 200000 by 25000 
Back from unconstrained MCMC. Average statistics:
                          sum                       nonzero 
                    193.23369                    1283.79259 
                   mutual.min transitiveweights.min.max.min 
                   -227.54264                    -343.78913 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -6860.51804                    1659.57313 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -2816.69247                     -12.10704 
     nodefactor.sum.Central.1 
                   -541.74719 
Average estimating equation values:
                          sum                       nonzero 
                    193.23369                    1283.79259 
                   mutual.min transitiveweights.min.max.min 
                   -227.54264                    -343.78913 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -6860.51804                    1659.57313 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -2816.69247                     -12.10704 
     nodefactor.sum.Central.1 
                   -541.74719 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0266169011592865  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 5.899 
Iteration 4 of at most 30 with parameter: 
                          sum                       nonzero 
                -2.5125763231                 -1.0043499994 
                   mutual.min transitiveweights.min.max.min 
                 0.6033770045                  0.3276195690 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                 0.0121143701                 -0.0005723295 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                 0.0001131127                  0.0107298201 
     nodefactor.sum.Central.1 
                 0.0155346426 
Using SOCK.
Sample size = 200000 by 25000 
Back from unconstrained MCMC. Average statistics:
                          sum                       nonzero 
                    196.91655                    1255.58280 
                   mutual.min transitiveweights.min.max.min 
                   -220.77774                    -327.32270 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                  -6611.96343                    1651.57787 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                  -2633.94970                     -10.80741 
     nodefactor.sum.Central.1 
                   -520.35291 
Average estimating equation values:
                          sum                       nonzero 
                     196.9165                     1255.5828 
                   mutual.min transitiveweights.min.max.min 
                    -220.7777                     -327.3227 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                   -6611.9634                     1651.5779 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                   -2633.9497                      -10.8074 
     nodefactor.sum.Central.1 
                    -520.3529 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0300713181495667  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 5.931 
Iteration 5 of at most 30 with parameter: 
                          sum                       nonzero 
                -2.3906422131                 -1.2636571089 
                   mutual.min transitiveweights.min.max.min 
                 0.6771414073                  0.4002916294 
         nodecov.sum..NUMRESP        nodecov.sum..NUMGROUPS 
                 0.0189380283                 -0.0011946466 
       nodecov.sum..MEANYEARS         nodematch.sum.ORGTYPE 
                 0.0003451307                  0.0189184833 
     nodefactor.sum.Central.1 
                 0.0270650343 
Using SOCK.
Failed to attach ergm on the slave nodes from the same location as the master node. Will try to load from anywhere in the library path.
Error in ergm.getCluster(control, verbose) : 
  Failed to attach ergm on one or more slave nodes. Make sure it's installed on or accessible from all of them and is in the library path.
Calls: ergm ... ergm.MCMLE -> ergm.getMCMCsample -> ergm.getCluster
In addition: Warning message:
In all(attached) : coercing argument of type 'list' to logical
Execution halted
