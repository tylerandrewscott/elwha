
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #rm(list=ls())
> #rm(list=ls())
> require(statnet)
Loading required package: statnet
Loading required package: network
network: Classes for Relational Data
Version 1.11.3 created on 2014-12-05.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

Loading required package: ergm
Loading required package: statnet.common

ergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-2 created on 2014-01-13.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:network’:

    %c%

Loading required package: networkDynamic

networkDynamic: version 0.7.1, created on 2014-09-29
Copyright (c) 2014, Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll, University of Washington
                    with contributions from
                    Zack Almquist, University of California -- Irvine
                    David R. Hunter, Penn State University
                    Li Wang
                    Kirk Li, University of Washington
                    Steven M. Goodreau, University of Washington
                    Jeffrey Horner
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("networkDynamic").

Loading required package: tergm

tergm: version 3.2.4, created on 2014-12-13
Copyright (c) 2014, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    David R. Hunter, Penn State University
                    Steven M. Goodreau, University of Washington
                    Martina Morris, University of Washington
                    Nicole Bohme Carnegie, New York University
                    Carter T. Butts, University of California -- Irvine
                    Ayn Leslie-Cook, University of Washington
                    Skye Bender-deMoll
                    Li Wang
                    Kirk Li, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("tergm").

Loading required package: ergm.count

ergm.count: version 3.1.1, created on 2013-03-29
Copyright (c) 2013, Pavel N. Krivitsky, University of Wollongong
                    with contributions from
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm.count").

Loading required package: latentnet

latentnet: version 2.5.1, created on 2014-02-17
Copyright (c) 2014, Pavel N. Krivitsky, University of Wollongong
                    Mark S. Handcock, University of California -- Los Angeles
                    with contributions from
                    Susan M. Shortreed
                    Jeremy Tantrum
                    Peter D. Hoff
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("latentnet").


Attaching package: ‘latentnet’

The following object is masked from ‘package:base’:

    scale


statnet: version 2014.2.0, created on 2014-02-05
Copyright (c) 2014, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Skye Bender-deMoll
                    Martina Morris, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("statnet").

> library(snow)
> library(rlecuyer)
> library(Rmpi)

Attaching package: ‘Rmpi’

The following object is masked from ‘package:rlecuyer’:

    .onUnload

> #setwd('H:/passtosim')
> #setwd("//Users/TScott/Google Drive/elwha")
> #setwd('H:/elwha/Dissert_Scripts/')
> setwd('/homes/tscott1/win/user/elwha/PSJ_Submission/Version3/min_versions')
> load('NetworkReady.RData')
> #load('Ready_to_ERGM.RData')
> g <- sum(net %e% "TVAL")/network.dyadcount(net)
> init.geo<-log(1 - 1/(g+1))
> geo.init = init.geo
> 
> as.mcmc.default <- coda:::as.mcmc.default
> as.mcmc.list.default <- coda:::as.mcmc.list.default
> 
> dpx <- dppsp * dpn
> spx <- sppsp * spn
> spn7 <- spn/7
> spx7 <- spx/7
> sppsp7 <- sppsp/7
> dpn7 <- dpn/7
> dpx7 <- dpx/7
> dppsp7 <- dppsp/7
> ipn_pt<-get.vertex.attribute(net,'IPn7')*as.sociomatrix(net,"PRIOR_TIE")
> ippsp_pt<-get.vertex.attribute(net,'IPpsp7')*as.sociomatrix(net,"PRIOR_TIE")
> ipx_pt<-get.vertex.attribute(net,'IPx7')*as.sociomatrix(net,"PRIOR_TIE")
> dpn_pt<-dpn7*as.sociomatrix(net,"PRIOR_TIE")
> dppsp_pt<-dppsp7*as.sociomatrix(net,"PRIOR_TIE")
> dpx_pt<-dpx7*as.sociomatrix(net,"PRIOR_TIE")
> spn_pt<-spn7*as.sociomatrix(net,"PRIOR_TIE")
> sppsp_pt<-sppsp7*as.sociomatrix(net,"PRIOR_TIE")
> spx_pt<-spx7*as.sociomatrix(net,"PRIOR_TIE")
> all_sp_quad<-((spn7+sppsp7)^2)
> all_sp_pt<-((spn7+sppsp7)*as.sociomatrix(net,"PRIOR_TIE"))
> all_sp<-(spn7+sppsp7)
> 
> 
> # mod_base <-
> #   ergm(net~sum+mutual(form="geometric")+
> #          transitiveweights("geomean","sum","geomean")+
> #                     nodecov("NUMRESP",form='sum')+
> #         nodecov("NUMGROUPS",form='sum')+nodecov("MEANYEARS",form='sum')+
> #           nodematch("ORGTYPE",form='sum',diff=FALSE)+
> #         nodecov('allpart',form='sum'),
> #        response="TVAL", reference=~DiscUnif(0,3),
> #        control=control.ergm(init=c(geo.init, rep(0, 7)),
> #                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                             MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                             parallel.type="SOCK",parallel=8,
> #                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                             MCMC.burnin=15000,MCMC.interval=1500,MCMLE.steplength=.25,
> #                             MCMC.prop.args=list(p0=0.5)),eval.loglik=T)
> # 
> # 
> 
> 
> mod_indpart<-
+ ergm(net~sum+
+        mutual(form="min")+
+        transitiveweights(twopath="min",combine="max",affect="min")+
+        nodecov("NUMRESP",form='sum')+
+        nodecov("NUMGROUPS",form='sum')+nodecov("MEANYEARS",form='sum')+
+        nodematch("ORGTYPE",form='sum',diff=FALSE)+
+        nodecov('IPn7')+nodecov('IPpsp7')+nodecov('IPx7'),
+      response="TVAL", reference=~DiscUnif(0,3),
+      control=control.ergm(init=c(geo.init, rep(0, 9)),
+                           MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
+                           MCMLE.trustregion=1000,MCMC.addto.se=T,
+                           parallel.type="SOCK",parallel=8,
+                           MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
+                           MCMC.burnin=15000,MCMC.interval=1500,MCMLE.steplength=.25,
+                           MCMC.prop.args=list(p0=0.5)),eval.loglik=F,verbose=T)
Evaluating network in model
Initializing Metropolis-Hastings proposal(s): ergm:MH_DiscUnif
Initializing model.
Fitting initial model.
Fitting ERGM.
Density guard set to 20989 from an initial count of 1045  edges.
Iteration 1 of at most 30 with parameter: 
                          sum                    mutual.min 
                    -3.091141                      0.000000 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                     0.000000                      0.000000 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                     0.000000                      0.000000 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     0.000000                      0.000000 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                     0.000000                      0.000000 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     -7.95148                    -267.57596 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -620.02808                   -7573.97296 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -75.15851                   -6345.78547 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -28.29800                  -10455.16221 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4862.51005                  -50870.86537 
Average estimating equation values:
                          sum                    mutual.min 
                     -7.95148                    -267.57596 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -620.02808                   -7573.97296 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    -75.15851                   -6345.78547 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -28.29800                  -10455.16221 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4862.51005                  -50870.86537 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.25  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 23.1 
Step length converged once. Increasing MCMC sample size.
Iteration 2 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.1814373069                  0.4091435443 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1115303039                  0.0049241522 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0004200503                  0.0001509284 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                 0.0133757739                 -0.0010844929 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                -0.0052358565                  0.0000984976 
Using SOCK.
Sample size = 200000 by 25000 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    118.69698                    -238.10113 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -431.05939                   -7166.42483 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1030.18755                   -4118.08883 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -15.23766                  -10149.25801 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4674.94803                  -50529.28716 
Average estimating equation values:
                          sum                    mutual.min 
                    118.69698                    -238.10113 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -431.05939                   -7166.42483 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1030.18755                   -4118.08883 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -15.23766                  -10149.25801 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4674.94803                  -50529.28716 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0484448671340943  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 6.362 
Iteration 3 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.3178830989                  0.5813723931 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1490763699                  0.0217574637 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 0.0001155487                  0.0005350615 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                 0.0312063624                  0.0033958737 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                -0.0030717939                  0.0003139262 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    120.96548                    -223.44988 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -390.94276                   -6725.22012 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1074.17975                   -3763.20479 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -13.36928                   -9520.60274 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4406.64455                  -47541.28014 
Average estimating equation values:
                          sum                    mutual.min 
                    120.96548                    -223.44988 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -390.94276                   -6725.22012 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1074.17975                   -3763.20479 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -13.36928                   -9520.60274 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4406.64455                  -47541.28014 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0503956079483033  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 3.958 
Iteration 4 of at most 30 with parameter: 
                          sum                    mutual.min 
                -3.4042521246                  0.7012015165 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                 0.1696935527                  0.0314629934 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                -0.0013362830                  0.0009712613 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                 0.0396646729                  0.0073819679 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                 0.0047788959                 -0.0003034594 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    136.06354                    -210.29582 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -352.54420                   -6305.19838 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1155.16437                   -3253.33931 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -11.59174                   -9041.56011 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4113.74147                  -45241.47475 
Average estimating equation values:
                          sum                    mutual.min 
                    136.06354                    -210.29582 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -352.54420                   -6305.19838 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1155.16437                   -3253.33931 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -11.59174                   -9041.56011 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -4113.74147                  -45241.47475 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0618903934955597  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 4.607 
Iteration 5 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.512664951                   0.821375944 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.188607679                   0.039950488 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.001245742                   0.001598150 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.053526527                   0.014559281 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.008429906                  -0.001040355 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    129.05454                    -197.47648 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -325.86682                   -5890.05716 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1141.47552                   -2906.89755 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -11.60046                   -8403.87464 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -3853.47743                  -42054.14164 
Average estimating equation values:
                          sum                    mutual.min 
                    129.05454                    -197.47648 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -325.86682                   -5890.05716 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1141.47552                   -2906.89755 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                    -11.60046                   -8403.87464 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -3853.47743                  -42054.14164 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.074626386165619  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 5.177 
Iteration 6 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.613021521                   0.913734111 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.196534646                   0.050891307 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.003447386                   0.002422461 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.090012913                   0.022425915 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.015367900                  -0.002411341 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     112.3448                     -185.3346 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -309.2077                    -5468.2635 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                     985.2649                    -2803.3952 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      -6.1716                    -7829.4519 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                   -3560.2944                   -38980.1330 
Average estimating equation values:
                          sum                    mutual.min 
                     112.3448                     -185.3346 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -309.2077                    -5468.2635 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                     985.2649                    -2803.3952 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      -6.1716                    -7829.4519 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                   -3560.2944                   -38980.1330 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0882272124290467  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 5.556 
Iteration 7 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.715029919                   1.022148889 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.201109815                   0.062663857 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.005400529                   0.003529560 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.107989790                   0.032317132 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.018563690                  -0.004087768 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    122.46882                    -165.48478 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -252.56130                   -4807.10338 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1009.81544                   -2030.81767 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -2.97282                   -6878.00321 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -3168.26473                  -34339.16536 
Average estimating equation values:
                          sum                    mutual.min 
                    122.46882                    -165.48478 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -252.56130                   -4807.10338 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   1009.81544                   -2030.81767 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -2.97282                   -6878.00321 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -3168.26473                  -34339.16536 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0867655873298646  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 3.96 
Iteration 8 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.800640616                   1.104983226 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.196464510                   0.068168975 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.005715124                   0.003628672 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.133330667                   0.042282149 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.030006279                  -0.005939640 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     118.0812                     -149.8683 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -220.8795                    -4313.7098 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1008.6831                    -1785.4756 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      -0.6231                    -6150.1425 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                   -2816.1545                   -30747.0330 
Average estimating equation values:
                          sum                    mutual.min 
                     118.0812                     -149.8683 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -220.8795                    -4313.7098 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    1008.6831                    -1785.4756 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      -0.6231                    -6150.1425 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                   -2816.1545                   -30747.0330 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.106932282447815  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 4.137 
Iteration 9 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.885605663                   1.185054230 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.190361104                   0.074329232 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.006835839                   0.004187445 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.151005522                   0.052183084 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.038136880                  -0.007754491 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    113.71966                    -134.55492 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -188.89382                   -3844.00870 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    960.25427                   -1574.19841 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      1.17818                   -5448.36335 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -2513.30782                  -27334.46473 
Average estimating equation values:
                          sum                    mutual.min 
                    113.71966                    -134.55492 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -188.89382                   -3844.00870 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    960.25427                   -1574.19841 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      1.17818                   -5448.36335 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -2513.30782                  -27334.46473 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.136108458042145  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 4.946 
Iteration 10 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -3.985000503                   1.268886626 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.183813205                   0.083241258 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.008393272                   0.005074262 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.150693917                   0.063524866 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.045397972                  -0.010163747 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     94.89932                    -116.12344 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -165.25188                   -3367.38628 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    779.65385                   -1406.13166 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -1.31778                   -4780.16210 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -2213.93192                  -23973.13190 
Average estimating equation values:
                          sum                    mutual.min 
                     94.89932                    -116.12344 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -165.25188                   -3367.38628 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    779.65385                   -1406.13166 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -1.31778                   -4780.16210 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -2213.93192                  -23973.13190 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.151178777217865  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 4.607 
Iteration 11 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -4.082024164                   1.344939376 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.166747138                   0.087255331 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.009339521                   0.005962671 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.162268850                   0.075510871 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.058066782                  -0.012463539 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     71.33414                    -100.83090 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -152.92748                   -2918.44172 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    612.03950                   -1334.54600 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -2.86742                   -4189.62102 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1873.99631                  -20667.61542 
Average estimating equation values:
                          sum                    mutual.min 
                     71.33414                    -100.83090 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -152.92748                   -2918.44172 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    612.03950                   -1334.54600 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     -2.86742                   -4189.62102 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1873.99631                  -20667.61542 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.183461278676987  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 4.544 
Iteration 12 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -4.173547244                   1.415956603 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.148280530                   0.093869638 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.010396523                   0.006895383 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.184388201                   0.087401148 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.066670051                  -0.014811331 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     77.25400                     -77.85990 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -108.29600                   -2286.01872 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    679.40043                    -749.07331 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      3.12642                   -3272.13274 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1487.66697                  -16318.79506 
Average estimating equation values:
                          sum                    mutual.min 
                     77.25400                     -77.85990 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -108.29600                   -2286.01872 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    679.40043                    -749.07331 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      3.12642                   -3272.13274 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1487.66697                  -16318.79506 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.237243384122849  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 5.216 
Iteration 13 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -4.277669911                   1.476830833 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.134447775                   0.099069511 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.011321644                   0.007609133 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.186138751                   0.100720526 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.077935504                  -0.017305677 
Using SOCK.
Sample size = 50000 by 6250 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                     82.13736                     -53.61512 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -54.27128                   -1572.54084 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    759.11457                    -175.13867 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      0.74750                   -2251.89910 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1028.13684                  -11365.28104 
Average estimating equation values:
                          sum                    mutual.min 
                     82.13736                     -53.61512 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                    -54.27128                   -1572.54084 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                    759.11457                    -175.13867 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                      0.74750                   -2251.89910 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -1028.13684                  -11365.28104 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.25  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 3.469 
Step length converged once. Increasing MCMC sample size.
Iteration 14 of at most 30 with parameter: 
                          sum                    mutual.min 
                 -4.377625640                   1.518220566 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                  0.122594377                   0.104188432 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                 -0.013004138                   0.008761038 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                  0.207516547                   0.112801397 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  0.086515022                  -0.019731360 
Using SOCK.
Sample size = 200000 by 25000 
Back from unconstrained MCMC. Average statistics:
                          sum                    mutual.min 
                    61.701355                    -38.370805 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -38.224395                  -1206.270165 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   572.120195                   -145.470474 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     2.787275                  -1651.146496 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -811.028655                  -8634.810888 
Average estimating equation values:
                          sum                    mutual.min 
                    61.701355                    -38.370805 
transitiveweights.min.max.min          nodecov.sum..NUMRESP 
                   -38.224395                  -1206.270165 
       nodecov.sum..NUMGROUPS        nodecov.sum..MEANYEARS 
                   572.120195                   -145.470474 
        nodematch.sum.ORGTYPE             nodecov.sum..IPn7 
                     2.787275                  -1651.146496 
          nodecov.sum..IPpsp7             nodecov.sum..IPx7 
                  -811.028655                  -8634.810888 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.25  ...
Using lognormal metric (see control.ergm function).
Optimizing loglikelihood
Starting MCMC s.e. computation.
The log-likelihood improved by 1.828 
Step length converged twice. Stopping.

This model was fit using MCMC.  To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function.
Warning message:
In logLikNull.ergm(mainfit) :
  Null model likelihood calculation is not implemented for valued ERGMs at this time.
> 
> save.image('result_indpart.RData')
> #mod_dirpart <-
> #     ergm(net~sum+mutual(form="min")+
> # transitiveweights("min","max","min")+nodecov("NUMRESP")+
> # nodecov("NUMGROUPS")+nodecov("MEANYEARS")+nodematch("ORGTYPE")+
> # edgecov(dpn7,form='sum')+edgecov(dppsp7,form='sum')+edgecov(dpx7,form='sum'),
> #          response="TVAL", reference=~DiscUnif(0,3),
> #          control=control.ergm(init=c(geo.init, rep(0, 9)),
> #                               MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                               MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                               parallel.type="MPI",parallel=8,
> #                               MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                               MCMC.burnin=15000,MCMC.interval=1500,MCMLE.steplength=.25,
> #                               MCMC.prop.args=list(p0=0.5)),eval.loglik=T)
> # 
> # mod_shapart <-
> #   ergm(net~sum+mutual(form="min")+
> #          transitiveweights("min","max","min")+nodecov("NUMRESP")+
> #          nodecov("NUMGROUPS")+nodecov("MEANYEARS")+nodematch("ORGTYPE",form='sum')+
> #          edgecov(spn7,form='sum')+edgecov(sppsp7,form='sum')+edgecov(spx7,form='sum'),
> #        response="TVAL", reference=~DiscUnif(0,3),
> #        control=control.ergm(init=c(geo.init, rep(0, 9)),
> #                             MCMLE.maxit=30,MCMC.runtime.traceplot=F,seed=24,
> #                             MCMLE.trustregion=1000,MCMC.addto.se=T,
> #                             parallel.type="MPI",parallel=8,
> #                             MPLE.max.dyad.types=1e+7,MCMC.samplesize=50000,
> #                             MCMC.burnin=15000,MCMC.interval=1500,MCMLE.steplength=.25,
> #                             MCMC.prop.args=list(p0=0.5)),eval.loglik=T)
> # 
> # detach(file:NetworkReady.RData)
> # 
> # rm(
> # list=ls()[intersect(grep('shapart',ls(),invert=T),grep('dirpart',ls(),
> #                                                        invert=T))])
> 
> rm(list=ls())
> 
