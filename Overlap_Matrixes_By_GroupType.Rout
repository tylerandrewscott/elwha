
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> 
> rm(list=ls())
> ###################################
> #begin script 6
> 
> edge.dat<-read.csv('//Users/TScott/Google Drive/PSP_Project/PS_Data/Edgelist.Dat.Good.csv',row.names=1)
> resp.dat<-read.csv('//Users/TScott/Google Drive/PSP_Project/PS_Data/Response.Contact.Dat.csv',row.names=1)
> 
> #group.dat.byedge<-read.csv("//Users/TScott/Google Drive/PSP_Project/PS_Data/Group.Membership.Dat.csv",row.names=1,header=T)
> group.dat.byedge<-read.csv("//Users/TScott/Google Drive/PSP_Project/PS_Data/Group.All.Dat.csv",row.names=1,header=T)
> group.dat.byresp<-read.csv("//Users/TScott/Google Drive/PSP_Project/PS_Data/Group.Member.Dat.csv",row.names=1,header=T)
> 
> PSP.Created<-rep(0,nrow(group.dat.byedge))
> PSP.Created[grep("G.ECO",group.dat.byedge$GroupID)]<-1
> PSP.Created[grep("G.LIO",group.dat.byedge$GroupID)]<-1
> PSP.Created[grep("G.LC",group.dat.byedge$GroupID)]<-1
> PSP.Created[grep("G.ECB",group.dat.byedge$GroupID)]<-1
> PSP.Created[grep("G.SCIENCE",group.dat.byedge$GroupID)]<-1
> PSP.Created[grep("G.SOCSCI",group.dat.byedge$GroupID)]<-1
> group.dat.byedge$PSP.Created<-PSP.Created
> 
> group.dat.byedge.psp<-subset(group.dat.byedge,group.dat.byedge$PSP.Created==1)
> group.dat.byedge.npsp<-subset(group.dat.byedge,group.dat.byedge$PSP.Created==0)
> 
> group.dat.byresp.psp<-group.dat.byresp[,c(1,c(grep("G.ECO",colnames(group.dat.byresp)),
+ grep("G.LIO",colnames(group.dat.byresp)),
+ grep("G.LC",colnames(group.dat.byresp)),
+ grep("G.ECB",colnames(group.dat.byresp)),
+ grep("G.SCIENCE",colnames(group.dat.byresp)),
+ grep("G.SOCSCI",colnames(group.dat.byresp))),65:ncol(group.dat.byresp))]
> 
> group.dat.byresp.npsp<-group.dat.byresp[,-c(grep("G.ECO",colnames(group.dat.byresp)),
+ grep("G.LIO",colnames(group.dat.byresp)),
+ grep("G.LC",colnames(group.dat.byresp)),
+ grep("G.ECB",colnames(group.dat.byresp)),
+ grep("G.SCIENCE",colnames(group.dat.byresp)),
+ grep("G.SOCSCI",colnames(group.dat.byresp)))]
> 
> 
> temp<-merge(group.dat.byresp,resp.dat)
> bigdat<-temp[with(temp,order(ORG,ID)),]
> temp<-merge(group.dat.byresp.psp,resp.dat)
> bigdat.psp<-temp[with(temp,order(ORG,ID)),]
> temp<-merge(group.dat.byresp.npsp,resp.dat)
> bigdat.npsp<-temp[with(temp,order(ORG,ID)),]
> ##################
> 
> #do similar thing, but weight for participation
> #turn group.dat into sociomatrix, then apply to actual sociomatrix
> 
> library(Matrix)
Loading required package: lattice
> 
> group.byresp.full<-bigdat
> group.byresp.full.psp<-bigdat.psp
> group.byresp.full.npsp<-bigdat.npsp
> #turned off so doesn't reset
> resp.bin.mat<-matrix(data=0,nrow=nrow(group.byresp.full),ncol=nrow(group.byresp.full))
> colnames(resp.bin.mat)<-group.byresp.full$ORG
> rownames(resp.bin.mat)<-group.byresp.full$ORG
> resp.bin.mat.psp<-matrix(data=0,nrow=nrow(group.byresp.full.psp),ncol=nrow(group.byresp.full.psp))
> colnames(resp.bin.mat.psp)<-group.byresp.full$ORG
> rownames(resp.bin.mat.psp)<-group.byresp.full$ORG
> resp.bin.mat.npsp<-matrix(data=0,nrow=nrow(group.byresp.full.npsp),ncol=nrow(group.byresp.full.npsp))
> colnames(resp.bin.mat.npsp)<-group.byresp.full$ORG
> rownames(resp.bin.mat.npsp)<-group.byresp.full$ORG
> 
> 
> pull.partic<-c(which(colnames(group.dat.byedge)=="email"):which(colnames(group.dat.byedge)=="other"))
> group.dat.byedge$part.sum<-rep(0,nrow(group.dat.byedge))
> group.dat.byedge.psp$part.sum<-rep(0,nrow(group.dat.byedge.psp))
> group.dat.byedge.npsp$part.sum<-rep(0,nrow(group.dat.byedge.npsp))
> 
> for (i in 1:nrow(group.dat.byedge))
+ {
+ 	group.dat.byedge$part.sum[i]<-sum(group.dat.byedge[i,pull.partic])
+ }
> 
> for (i in 1:nrow(group.dat.byedge.psp))
+ {
+ 	group.dat.byedge.psp$part.sum[i]<-sum(group.dat.byedge.psp[i,pull.partic])
+ }
> for (i in 1:nrow(group.dat.byedge.npsp))
+ {
+ 	group.dat.byedge.npsp$part.sum[i]<-sum(group.dat.byedge.npsp[i,pull.partic])
+ }
> 
> last.col<-which(colnames(group.byresp.full)=="G.OTHER.1")-1
> last.col.psp<-which(colnames(group.byresp.full.psp)=="G.OTHER.1")-1
> last.col.npsp<-which(colnames(group.byresp.full.npsp)=="G.OTHER.1")-1
> 
> #bindary indicator for each organization in sociomatrix
> for (i in 1:nrow(resp.bin.mat))
+ {
+ 	for (j in 1:nrow(resp.bin.mat))
+ {	
+ 	oscore=0
+ 	for (k in 2:last.col)
+ {
+ 	if (group.byresp.full[i,k]==1&group.byresp.full[j,k]==1){oscore=oscore+1}
+ 	else {oscore=oscore}
+ }
+ resp.bin.mat[i,j]<-oscore
+ }}
> 
> #bindary indicator for each organization in sociomatrix
> for (i in 1:nrow(resp.bin.mat.psp))
+ {
+ 	for (j in 1:nrow(resp.bin.mat.psp))
+ {	
+ 	oscore=0
+ 	for (k in 2:last.col.psp)
+ {
+ 	if (group.byresp.full.psp[i,k]==1&group.byresp.full.psp[j,k]==1){oscore=oscore+1}
+ 	else {oscore=oscore}
+ }
+ resp.bin.mat.psp[i,j]<-oscore
+ }}
> 
> 
> #bindary indicator for each organization in sociomatrix
> for (i in 1:nrow(resp.bin.mat.npsp))
+ {
+ 	for (j in 1:nrow(resp.bin.mat.npsp))
+ {	
+ 	oscore=0
+ 	for (k in 2:last.col.npsp)
+ {
+ 	if (group.byresp.full.npsp[i,k]==1&group.byresp.full.npsp[j,k]==1){oscore=oscore+1}
+ 	else {oscore=oscore}
+ }
+ resp.bin.mat.npsp[i,j]<-oscore
+ }
+ }
> 
> 
> 
> write.csv(resp.bin.mat,file="//Users/TScott/Google Drive/PSP_Project/PS_Data/Shared.Groups.csv")
> write.csv(resp.bin.mat.psp,file="//Users/TScott/Google Drive/PSP_Project/PS_Data/Shared.Groups.Psp.csv")
> write.csv(resp.bin.mat.npsp,file="//Users/TScott/Google Drive/PSP_Project/PS_Data/Shared.Groups.Npsp.csv")
> 
> proc.time()
    user   system  elapsed 
1272.936   24.831 1299.874 
